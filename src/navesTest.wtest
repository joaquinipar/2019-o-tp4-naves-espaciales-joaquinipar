import naves.*

describe "Nave de carga" {

	const naveVacia = new NaveDeCarga()
	const naveLlena = new NaveDeCarga(carga = 500000, velocidad = 290000)

	test "sobrecargada" {
		assert.that(naveLlena.sobrecargada())
	}

	test "no sobrecargada" {
		assert.notThat(naveVacia.sobrecargada())
	}

	test "excedida de velocidad" {
		assert.that(naveLlena.excedidaDeVelocidad())
	}

	test "no excedida de velocidad" {
		assert.notThat(naveVacia.excedidaDeVelocidad())
	}

	test "recibir amenaza" {
		naveLlena.recibirAmenaza()
		assert.equals(0, naveVacia.carga())
	}
	
	test "al propulsar no esta excedida de velocidad"{
		
		naveVacia.propulsar()
		assert.equals(20000,naveVacia.velocidad())
		
	}
}

describe "Nave de pasajeros" {
	
	const naveSinPasajeros = new NaveDePasajeros(cantidadDePasajeros = 0)
	const naveConPasajeros = new NaveDePasajeros(cantidadDePasajeros = 296, velocidad = 290000)
	const naveEstatica = new NaveDePasajeros(cantidadDePasajeros=2,velocidad=0)
	
	test "velocidad maxima sin pasajeros" {
		assert.equals(75000, naveSinPasajeros.velocidadMaximaLegal())
	}

	test "velocidad maxima con pasajeros" {
		assert.equals(1000 - 200, naveConPasajeros.velocidadMaximaLegal())
	}

	test "esta en peligro" {
		assert.that(naveConPasajeros.estaEnPeligro())
	}

	test "no esta en peligro" {
		assert.notThat(naveSinPasajeros.estaEnPeligro())
	}

	test "recibir amenaza" {
		naveSinPasajeros.recibirAmenaza()
		assert.that(naveSinPasajeros.alarma())
	}
	test "al propulsar queda viajando a 300000"{
		
		naveConPasajeros.propulsar()
		assert.equals(300000, naveConPasajeros.velocidad())
		
	}
	
	test "nave de pasajeros a 290000(km/s) al prepararse para viajar se queda en 300000(km/s)"{
		
		naveConPasajeros.prepararseParaViajar()
		
		assert.equals(300000,naveConPasajeros.velocidad())
		
	}
	
	test "nave sin velocidad queda con 20000km/s y alarma encendida luego de encontrarse con enemigo"{
		
		naveEstatica.encontrarEnemigo()
		assert.equals(20000,naveEstatica.velocidad())
		assert.equals(true,naveEstatica.alarma())
	}
	
}

describe "Nave de combate" {

	const naveEnReposo = new NaveDeCombate()
	const naveEnAtaque = new NaveDeCombate(modo = ataque)

	test "no esta invisible en reposo" {
		assert.notThat(naveEnReposo.estaInvisible())
	}

	test "esta invisible en ataque" {
		assert.that(naveEnAtaque.estaInvisible())
	}

	test "no esta invisible en ataque" {
		naveEnAtaque.velocidad(20000)
		assert.notThat(naveEnAtaque.estaInvisible())
	}

	test "recibir amenaza en reposo" {
		naveEnReposo.recibirAmenaza()
		assert.equals("Â¡RETIRADA!", naveEnReposo.ultimoMensaje())
	}

	test "recibir amenaza en ataque" {
		naveEnAtaque.recibirAmenaza()
		assert.equals("Enemigo encontrado", naveEnAtaque.ultimoMensaje())
	}
	
	
}

describe "Nave de Carga de Residuos Radioactivos"{
	
	const naveCargadaRadioactiva = new NaveDeCargaRadioactiva(carga = 5000, velocidad = 10000 )
	const naveSinVelocidad = new NaveDeCargaRadioactiva(velocidad=0, estaSellado = false)
	
	test "naveCargadaRadioactiva con una carga de 5000 y velocidad de 10000 recibe amenaza"{
		
		naveCargadaRadioactiva.recibirAmenaza()
		assert.equals(5000,naveCargadaRadioactiva.carga() )
		
	}
	
	test"Nave sin velocidad y sin sellar al prepararse para viajar termina sellada y con velocidad de 15000"{
		
		naveSinVelocidad.prepararseParaViajar()
		assert.equals(15000,naveSinVelocidad.velocidad())
		assert.equals(true,naveSinVelocidad.estaSellado())
		
	}
}

